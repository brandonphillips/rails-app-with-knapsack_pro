#!/usr/bin/env ruby
require 'knapsack_pro'

# The purpose of this file is to test a big traffic load on API Queue including sending recored tests timing
# to build subset API.
#
# Run this file with rspec
#  $ cd bin/api_test && rspec bin/api_test/queue
# You should not run it from root repo directory because then rspec loads .rspec file.
# We don't want to require rails_helper from .rspec file.

node_total = 5
multiple_tests_amount = 5
run_builds = 10

# use staging API
ENV['KNAPSACK_PRO_MODE'] = 'test'
ENV['KNAPSACK_PRO_TEST_SUITE_TOKEN'] = ENV['API_TEST_KNAPSACK_PRO_TEST_SUITE_TOKEN_STAGING']

# use production
#ENV['KNAPSACK_PRO_MODE'] = 'production'
#ENV['KNAPSACK_PRO_TEST_SUITE_TOKEN'] = ENV['API_TEST_KNAPSACK_PRO_TEST_SUITE_TOKEN_PRODUCTION']

ENV['KNAPSACK_PRO_LOG_LEVEL'] = 'warn'

test_files = []
(node_total*multiple_tests_amount).times do |i|
  test_files << {"path"=>"spec/#{i}_spec.rb"}
end
expected_test_files = KnapsackPro::TestFilePresenter.paths(test_files).sort

def test_files_from_queue(can_initialize_queue, commit_hash, branch, node_total, node_index, node_build_id, test_files)
  #ENV['KNAPSACK_PRO_FIXED_QUEUE_SPLIT'] = 'true'

  # if this is missing then concurrent requests may trigger a new Queue
  # so rspec tests at the bottom of this file will fail due duplicated tests
  ENV['KNAPSACK_PRO_CI_NODE_BUILD_ID'] = node_build_id

  action = KnapsackPro::Client::API::V1::Queues.queue(
    can_initialize_queue: can_initialize_queue,
    commit_hash: commit_hash,
    branch: branch,
    node_total: node_total,
    node_index: node_index,
    test_files: test_files,
  )
  connection = KnapsackPro::Client::Connection.new(action)
  response = connection.call
  if connection.success?
    raise ArgumentError.new(response) if connection.errors?
    KnapsackPro::TestFilePresenter.paths(response['test_files'])
  else
    raise ArgumentError.new("Couldn't connect with Knapsack Pro API. Response: #{response}")
  end
end

def create_build_subset(commit_hash, branch, node_total, node_index, test_files)
  action = KnapsackPro::Client::API::V1::BuildSubsets.create(
    commit_hash: commit_hash,
    branch: branch,
    node_total: node_total,
    node_index: node_index,
    test_files: test_files,
  )
  connection = KnapsackPro::Client::Connection.new(action)
  response = connection.call
  if connection.success?
    raise ArgumentError.new(response) if connection.errors?
  else
    raise ArgumentError.new("Couldn't connect with Knapsack Pro API. Response: #{response}")
  end
end

run_builds.times do |index_run|
  commit_hash = SecureRandom.hex
  branch = "api_queue_load_test_#{index_run}"
  puts
  puts "Start run: #{index_run}, commit hash: #{commit_hash}"

  threads = []
  node_total.times do |node_index|
    threads << Thread.new do
      can_initialize_queue = true
      node_all_test_files = []
      while true
        start_time = Time.now
        node_build_id = "ci-build-#{commit_hash}-index_run-#{index_run}"
        node_subset_test_files = test_files_from_queue(can_initialize_queue, commit_hash, branch, node_total, node_index, node_build_id, test_files)
        time_execution = Time.now - start_time

        node_all_test_files += node_subset_test_files.map do |path|
          { path: path, time_execution: time_execution }
        end
        can_initialize_queue = false

        #puts
        #puts "CI node: #{node_index}"
        #puts node_subset_test_files.inspect

        if node_subset_test_files.empty?
          break
        end
      end
      create_build_subset(commit_hash, branch, node_total, node_index, node_all_test_files)
      { test_files: node_all_test_files, node_index: node_index }
    end
  end

  all_test_files = []
  threads.each do |thr|
    result = thr.join.value
    all_test_files += result[:test_files]
    puts "Run: #{index_run}, recorded tests for CI node: #{result[:node_index]}, test files: #{result[:test_files]}"
  end

  describe "Ensure queue API returns all test files without duplicates. Run #{index_run}" do
    it do
      expect(all_test_files.map { |t| t[:path] }.sort).to eq expected_test_files
    end
  end
end
